// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geogrid.proto

#ifndef PROTOBUF_INCLUDED_geogrid_2eproto
#define PROTOBUF_INCLUDED_geogrid_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_geogrid_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_geogrid_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_geogrid_2eproto();
namespace proto {
class GeoGrid;
class GeoGridDefaultTypeInternal;
extern GeoGridDefaultTypeInternal _GeoGrid_default_instance_;
class GeoGrid_Location;
class GeoGrid_LocationDefaultTypeInternal;
extern GeoGrid_LocationDefaultTypeInternal _GeoGrid_Location_default_instance_;
class GeoGrid_Location_Commute;
class GeoGrid_Location_CommuteDefaultTypeInternal;
extern GeoGrid_Location_CommuteDefaultTypeInternal _GeoGrid_Location_Commute_default_instance_;
class GeoGrid_Location_ContactPools;
class GeoGrid_Location_ContactPoolsDefaultTypeInternal;
extern GeoGrid_Location_ContactPoolsDefaultTypeInternal _GeoGrid_Location_ContactPools_default_instance_;
class GeoGrid_Location_ContactPools_ContactPool;
class GeoGrid_Location_ContactPools_ContactPoolDefaultTypeInternal;
extern GeoGrid_Location_ContactPools_ContactPoolDefaultTypeInternal _GeoGrid_Location_ContactPools_ContactPool_default_instance_;
class GeoGrid_Location_Coordinate;
class GeoGrid_Location_CoordinateDefaultTypeInternal;
extern GeoGrid_Location_CoordinateDefaultTypeInternal _GeoGrid_Location_Coordinate_default_instance_;
class GeoGrid_Person;
class GeoGrid_PersonDefaultTypeInternal;
extern GeoGrid_PersonDefaultTypeInternal _GeoGrid_Person_default_instance_;
}  // namespace proto
namespace google {
namespace protobuf {
template<> ::proto::GeoGrid* Arena::CreateMaybeMessage<::proto::GeoGrid>(Arena*);
template<> ::proto::GeoGrid_Location* Arena::CreateMaybeMessage<::proto::GeoGrid_Location>(Arena*);
template<> ::proto::GeoGrid_Location_Commute* Arena::CreateMaybeMessage<::proto::GeoGrid_Location_Commute>(Arena*);
template<> ::proto::GeoGrid_Location_ContactPools* Arena::CreateMaybeMessage<::proto::GeoGrid_Location_ContactPools>(Arena*);
template<> ::proto::GeoGrid_Location_ContactPools_ContactPool* Arena::CreateMaybeMessage<::proto::GeoGrid_Location_ContactPools_ContactPool>(Arena*);
template<> ::proto::GeoGrid_Location_Coordinate* Arena::CreateMaybeMessage<::proto::GeoGrid_Location_Coordinate>(Arena*);
template<> ::proto::GeoGrid_Person* Arena::CreateMaybeMessage<::proto::GeoGrid_Person>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace proto {

enum GeoGrid_Location_ContactPools_Type {
  GeoGrid_Location_ContactPools_Type_K12School = 0,
  GeoGrid_Location_ContactPools_Type_PrimaryCommunity = 1,
  GeoGrid_Location_ContactPools_Type_SecondaryCommunity = 2,
  GeoGrid_Location_ContactPools_Type_College = 3,
  GeoGrid_Location_ContactPools_Type_Household = 4,
  GeoGrid_Location_ContactPools_Type_Workplace = 5,
  GeoGrid_Location_ContactPools_Type_GeoGrid_Location_ContactPools_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  GeoGrid_Location_ContactPools_Type_GeoGrid_Location_ContactPools_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool GeoGrid_Location_ContactPools_Type_IsValid(int value);
const GeoGrid_Location_ContactPools_Type GeoGrid_Location_ContactPools_Type_Type_MIN = GeoGrid_Location_ContactPools_Type_K12School;
const GeoGrid_Location_ContactPools_Type GeoGrid_Location_ContactPools_Type_Type_MAX = GeoGrid_Location_ContactPools_Type_Workplace;
const int GeoGrid_Location_ContactPools_Type_Type_ARRAYSIZE = GeoGrid_Location_ContactPools_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* GeoGrid_Location_ContactPools_Type_descriptor();
inline const ::std::string& GeoGrid_Location_ContactPools_Type_Name(GeoGrid_Location_ContactPools_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    GeoGrid_Location_ContactPools_Type_descriptor(), value);
}
inline bool GeoGrid_Location_ContactPools_Type_Parse(
    const ::std::string& name, GeoGrid_Location_ContactPools_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GeoGrid_Location_ContactPools_Type>(
    GeoGrid_Location_ContactPools_Type_descriptor(), name, value);
}
// ===================================================================

class GeoGrid_Location_Coordinate final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GeoGrid.Location.Coordinate) */ {
 public:
  GeoGrid_Location_Coordinate();
  virtual ~GeoGrid_Location_Coordinate();

  GeoGrid_Location_Coordinate(const GeoGrid_Location_Coordinate& from);

  inline GeoGrid_Location_Coordinate& operator=(const GeoGrid_Location_Coordinate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GeoGrid_Location_Coordinate(GeoGrid_Location_Coordinate&& from) noexcept
    : GeoGrid_Location_Coordinate() {
    *this = ::std::move(from);
  }

  inline GeoGrid_Location_Coordinate& operator=(GeoGrid_Location_Coordinate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GeoGrid_Location_Coordinate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeoGrid_Location_Coordinate* internal_default_instance() {
    return reinterpret_cast<const GeoGrid_Location_Coordinate*>(
               &_GeoGrid_Location_Coordinate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GeoGrid_Location_Coordinate* other);
  friend void swap(GeoGrid_Location_Coordinate& a, GeoGrid_Location_Coordinate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeoGrid_Location_Coordinate* New() const final {
    return CreateMaybeMessage<GeoGrid_Location_Coordinate>(nullptr);
  }

  GeoGrid_Location_Coordinate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GeoGrid_Location_Coordinate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GeoGrid_Location_Coordinate& from);
  void MergeFrom(const GeoGrid_Location_Coordinate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeoGrid_Location_Coordinate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double longitude = 1;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 1;
  double longitude() const;
  void set_longitude(double value);

  // double latitude = 2;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 2;
  double latitude() const;
  void set_latitude(double value);

  // @@protoc_insertion_point(class_scope:proto.GeoGrid.Location.Coordinate)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double longitude_;
  double latitude_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geogrid_2eproto;
};
// -------------------------------------------------------------------

class GeoGrid_Location_ContactPools_ContactPool final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GeoGrid.Location.ContactPools.ContactPool) */ {
 public:
  GeoGrid_Location_ContactPools_ContactPool();
  virtual ~GeoGrid_Location_ContactPools_ContactPool();

  GeoGrid_Location_ContactPools_ContactPool(const GeoGrid_Location_ContactPools_ContactPool& from);

  inline GeoGrid_Location_ContactPools_ContactPool& operator=(const GeoGrid_Location_ContactPools_ContactPool& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GeoGrid_Location_ContactPools_ContactPool(GeoGrid_Location_ContactPools_ContactPool&& from) noexcept
    : GeoGrid_Location_ContactPools_ContactPool() {
    *this = ::std::move(from);
  }

  inline GeoGrid_Location_ContactPools_ContactPool& operator=(GeoGrid_Location_ContactPools_ContactPool&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GeoGrid_Location_ContactPools_ContactPool& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeoGrid_Location_ContactPools_ContactPool* internal_default_instance() {
    return reinterpret_cast<const GeoGrid_Location_ContactPools_ContactPool*>(
               &_GeoGrid_Location_ContactPools_ContactPool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GeoGrid_Location_ContactPools_ContactPool* other);
  friend void swap(GeoGrid_Location_ContactPools_ContactPool& a, GeoGrid_Location_ContactPools_ContactPool& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeoGrid_Location_ContactPools_ContactPool* New() const final {
    return CreateMaybeMessage<GeoGrid_Location_ContactPools_ContactPool>(nullptr);
  }

  GeoGrid_Location_ContactPools_ContactPool* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GeoGrid_Location_ContactPools_ContactPool>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GeoGrid_Location_ContactPools_ContactPool& from);
  void MergeFrom(const GeoGrid_Location_ContactPools_ContactPool& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeoGrid_Location_ContactPools_ContactPool* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 people = 2;
  int people_size() const;
  void clear_people();
  static const int kPeopleFieldNumber = 2;
  ::google::protobuf::int64 people(int index) const;
  void set_people(int index, ::google::protobuf::int64 value);
  void add_people(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      people() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_people();

  // int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto.GeoGrid.Location.ContactPools.ContactPool)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > people_;
  mutable std::atomic<int> _people_cached_byte_size_;
  ::google::protobuf::int64 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geogrid_2eproto;
};
// -------------------------------------------------------------------

class GeoGrid_Location_ContactPools final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GeoGrid.Location.ContactPools) */ {
 public:
  GeoGrid_Location_ContactPools();
  virtual ~GeoGrid_Location_ContactPools();

  GeoGrid_Location_ContactPools(const GeoGrid_Location_ContactPools& from);

  inline GeoGrid_Location_ContactPools& operator=(const GeoGrid_Location_ContactPools& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GeoGrid_Location_ContactPools(GeoGrid_Location_ContactPools&& from) noexcept
    : GeoGrid_Location_ContactPools() {
    *this = ::std::move(from);
  }

  inline GeoGrid_Location_ContactPools& operator=(GeoGrid_Location_ContactPools&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GeoGrid_Location_ContactPools& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeoGrid_Location_ContactPools* internal_default_instance() {
    return reinterpret_cast<const GeoGrid_Location_ContactPools*>(
               &_GeoGrid_Location_ContactPools_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GeoGrid_Location_ContactPools* other);
  friend void swap(GeoGrid_Location_ContactPools& a, GeoGrid_Location_ContactPools& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeoGrid_Location_ContactPools* New() const final {
    return CreateMaybeMessage<GeoGrid_Location_ContactPools>(nullptr);
  }

  GeoGrid_Location_ContactPools* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GeoGrid_Location_ContactPools>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GeoGrid_Location_ContactPools& from);
  void MergeFrom(const GeoGrid_Location_ContactPools& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeoGrid_Location_ContactPools* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GeoGrid_Location_ContactPools_ContactPool ContactPool;

  typedef GeoGrid_Location_ContactPools_Type Type;
  static const Type K12School =
    GeoGrid_Location_ContactPools_Type_K12School;
  static const Type PrimaryCommunity =
    GeoGrid_Location_ContactPools_Type_PrimaryCommunity;
  static const Type SecondaryCommunity =
    GeoGrid_Location_ContactPools_Type_SecondaryCommunity;
  static const Type College =
    GeoGrid_Location_ContactPools_Type_College;
  static const Type Household =
    GeoGrid_Location_ContactPools_Type_Household;
  static const Type Workplace =
    GeoGrid_Location_ContactPools_Type_Workplace;
  static inline bool Type_IsValid(int value) {
    return GeoGrid_Location_ContactPools_Type_IsValid(value);
  }
  static const Type Type_MIN =
    GeoGrid_Location_ContactPools_Type_Type_MIN;
  static const Type Type_MAX =
    GeoGrid_Location_ContactPools_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    GeoGrid_Location_ContactPools_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return GeoGrid_Location_ContactPools_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return GeoGrid_Location_ContactPools_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return GeoGrid_Location_ContactPools_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .proto.GeoGrid.Location.ContactPools.ContactPool pools = 3;
  int pools_size() const;
  void clear_pools();
  static const int kPoolsFieldNumber = 3;
  ::proto::GeoGrid_Location_ContactPools_ContactPool* mutable_pools(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::GeoGrid_Location_ContactPools_ContactPool >*
      mutable_pools();
  const ::proto::GeoGrid_Location_ContactPools_ContactPool& pools(int index) const;
  ::proto::GeoGrid_Location_ContactPools_ContactPool* add_pools();
  const ::google::protobuf::RepeatedPtrField< ::proto::GeoGrid_Location_ContactPools_ContactPool >&
      pools() const;

  // int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // .proto.GeoGrid.Location.ContactPools.Type type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::proto::GeoGrid_Location_ContactPools_Type type() const;
  void set_type(::proto::GeoGrid_Location_ContactPools_Type value);

  // @@protoc_insertion_point(class_scope:proto.GeoGrid.Location.ContactPools)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::GeoGrid_Location_ContactPools_ContactPool > pools_;
  ::google::protobuf::int64 id_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geogrid_2eproto;
};
// -------------------------------------------------------------------

class GeoGrid_Location_Commute final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GeoGrid.Location.Commute) */ {
 public:
  GeoGrid_Location_Commute();
  virtual ~GeoGrid_Location_Commute();

  GeoGrid_Location_Commute(const GeoGrid_Location_Commute& from);

  inline GeoGrid_Location_Commute& operator=(const GeoGrid_Location_Commute& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GeoGrid_Location_Commute(GeoGrid_Location_Commute&& from) noexcept
    : GeoGrid_Location_Commute() {
    *this = ::std::move(from);
  }

  inline GeoGrid_Location_Commute& operator=(GeoGrid_Location_Commute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GeoGrid_Location_Commute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeoGrid_Location_Commute* internal_default_instance() {
    return reinterpret_cast<const GeoGrid_Location_Commute*>(
               &_GeoGrid_Location_Commute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GeoGrid_Location_Commute* other);
  friend void swap(GeoGrid_Location_Commute& a, GeoGrid_Location_Commute& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeoGrid_Location_Commute* New() const final {
    return CreateMaybeMessage<GeoGrid_Location_Commute>(nullptr);
  }

  GeoGrid_Location_Commute* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GeoGrid_Location_Commute>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GeoGrid_Location_Commute& from);
  void MergeFrom(const GeoGrid_Location_Commute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeoGrid_Location_Commute* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 to = 1;
  void clear_to();
  static const int kToFieldNumber = 1;
  ::google::protobuf::int64 to() const;
  void set_to(::google::protobuf::int64 value);

  // double proportion = 2;
  void clear_proportion();
  static const int kProportionFieldNumber = 2;
  double proportion() const;
  void set_proportion(double value);

  // @@protoc_insertion_point(class_scope:proto.GeoGrid.Location.Commute)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 to_;
  double proportion_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geogrid_2eproto;
};
// -------------------------------------------------------------------

class GeoGrid_Location final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GeoGrid.Location) */ {
 public:
  GeoGrid_Location();
  virtual ~GeoGrid_Location();

  GeoGrid_Location(const GeoGrid_Location& from);

  inline GeoGrid_Location& operator=(const GeoGrid_Location& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GeoGrid_Location(GeoGrid_Location&& from) noexcept
    : GeoGrid_Location() {
    *this = ::std::move(from);
  }

  inline GeoGrid_Location& operator=(GeoGrid_Location&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GeoGrid_Location& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeoGrid_Location* internal_default_instance() {
    return reinterpret_cast<const GeoGrid_Location*>(
               &_GeoGrid_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GeoGrid_Location* other);
  friend void swap(GeoGrid_Location& a, GeoGrid_Location& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeoGrid_Location* New() const final {
    return CreateMaybeMessage<GeoGrid_Location>(nullptr);
  }

  GeoGrid_Location* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GeoGrid_Location>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GeoGrid_Location& from);
  void MergeFrom(const GeoGrid_Location& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeoGrid_Location* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GeoGrid_Location_Coordinate Coordinate;
  typedef GeoGrid_Location_ContactPools ContactPools;
  typedef GeoGrid_Location_Commute Commute;

  // accessors -------------------------------------------------------

  // repeated .proto.GeoGrid.Location.ContactPools contactPools = 6;
  int contactpools_size() const;
  void clear_contactpools();
  static const int kContactPoolsFieldNumber = 6;
  ::proto::GeoGrid_Location_ContactPools* mutable_contactpools(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::GeoGrid_Location_ContactPools >*
      mutable_contactpools();
  const ::proto::GeoGrid_Location_ContactPools& contactpools(int index) const;
  ::proto::GeoGrid_Location_ContactPools* add_contactpools();
  const ::google::protobuf::RepeatedPtrField< ::proto::GeoGrid_Location_ContactPools >&
      contactpools() const;

  // repeated .proto.GeoGrid.Location.Commute commutes = 7;
  int commutes_size() const;
  void clear_commutes();
  static const int kCommutesFieldNumber = 7;
  ::proto::GeoGrid_Location_Commute* mutable_commutes(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::GeoGrid_Location_Commute >*
      mutable_commutes();
  const ::proto::GeoGrid_Location_Commute& commutes(int index) const;
  ::proto::GeoGrid_Location_Commute* add_commutes();
  const ::google::protobuf::RepeatedPtrField< ::proto::GeoGrid_Location_Commute >&
      commutes() const;

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .proto.GeoGrid.Location.Coordinate coordinate = 5;
  bool has_coordinate() const;
  void clear_coordinate();
  static const int kCoordinateFieldNumber = 5;
  const ::proto::GeoGrid_Location_Coordinate& coordinate() const;
  ::proto::GeoGrid_Location_Coordinate* release_coordinate();
  ::proto::GeoGrid_Location_Coordinate* mutable_coordinate();
  void set_allocated_coordinate(::proto::GeoGrid_Location_Coordinate* coordinate);

  // int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // int64 province = 3;
  void clear_province();
  static const int kProvinceFieldNumber = 3;
  ::google::protobuf::int64 province() const;
  void set_province(::google::protobuf::int64 value);

  // int64 population = 4;
  void clear_population();
  static const int kPopulationFieldNumber = 4;
  ::google::protobuf::int64 population() const;
  void set_population(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto.GeoGrid.Location)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::GeoGrid_Location_ContactPools > contactpools_;
  ::google::protobuf::RepeatedPtrField< ::proto::GeoGrid_Location_Commute > commutes_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::proto::GeoGrid_Location_Coordinate* coordinate_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 province_;
  ::google::protobuf::int64 population_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geogrid_2eproto;
};
// -------------------------------------------------------------------

class GeoGrid_Person final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GeoGrid.Person) */ {
 public:
  GeoGrid_Person();
  virtual ~GeoGrid_Person();

  GeoGrid_Person(const GeoGrid_Person& from);

  inline GeoGrid_Person& operator=(const GeoGrid_Person& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GeoGrid_Person(GeoGrid_Person&& from) noexcept
    : GeoGrid_Person() {
    *this = ::std::move(from);
  }

  inline GeoGrid_Person& operator=(GeoGrid_Person&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GeoGrid_Person& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeoGrid_Person* internal_default_instance() {
    return reinterpret_cast<const GeoGrid_Person*>(
               &_GeoGrid_Person_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(GeoGrid_Person* other);
  friend void swap(GeoGrid_Person& a, GeoGrid_Person& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeoGrid_Person* New() const final {
    return CreateMaybeMessage<GeoGrid_Person>(nullptr);
  }

  GeoGrid_Person* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GeoGrid_Person>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GeoGrid_Person& from);
  void MergeFrom(const GeoGrid_Person& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeoGrid_Person* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // int64 age = 2;
  void clear_age();
  static const int kAgeFieldNumber = 2;
  ::google::protobuf::int64 age() const;
  void set_age(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto.GeoGrid.Person)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 age_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geogrid_2eproto;
};
// -------------------------------------------------------------------

class GeoGrid final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GeoGrid) */ {
 public:
  GeoGrid();
  virtual ~GeoGrid();

  GeoGrid(const GeoGrid& from);

  inline GeoGrid& operator=(const GeoGrid& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GeoGrid(GeoGrid&& from) noexcept
    : GeoGrid() {
    *this = ::std::move(from);
  }

  inline GeoGrid& operator=(GeoGrid&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GeoGrid& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeoGrid* internal_default_instance() {
    return reinterpret_cast<const GeoGrid*>(
               &_GeoGrid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(GeoGrid* other);
  friend void swap(GeoGrid& a, GeoGrid& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeoGrid* New() const final {
    return CreateMaybeMessage<GeoGrid>(nullptr);
  }

  GeoGrid* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GeoGrid>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GeoGrid& from);
  void MergeFrom(const GeoGrid& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeoGrid* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GeoGrid_Location Location;
  typedef GeoGrid_Person Person;

  // accessors -------------------------------------------------------

  // repeated .proto.GeoGrid.Location locations = 1;
  int locations_size() const;
  void clear_locations();
  static const int kLocationsFieldNumber = 1;
  ::proto::GeoGrid_Location* mutable_locations(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::GeoGrid_Location >*
      mutable_locations();
  const ::proto::GeoGrid_Location& locations(int index) const;
  ::proto::GeoGrid_Location* add_locations();
  const ::google::protobuf::RepeatedPtrField< ::proto::GeoGrid_Location >&
      locations() const;

  // repeated .proto.GeoGrid.Person persons = 2;
  int persons_size() const;
  void clear_persons();
  static const int kPersonsFieldNumber = 2;
  ::proto::GeoGrid_Person* mutable_persons(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::GeoGrid_Person >*
      mutable_persons();
  const ::proto::GeoGrid_Person& persons(int index) const;
  ::proto::GeoGrid_Person* add_persons();
  const ::google::protobuf::RepeatedPtrField< ::proto::GeoGrid_Person >&
      persons() const;

  // @@protoc_insertion_point(class_scope:proto.GeoGrid)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::GeoGrid_Location > locations_;
  ::google::protobuf::RepeatedPtrField< ::proto::GeoGrid_Person > persons_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geogrid_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GeoGrid_Location_Coordinate

// double longitude = 1;
inline void GeoGrid_Location_Coordinate::clear_longitude() {
  longitude_ = 0;
}
inline double GeoGrid_Location_Coordinate::longitude() const {
  // @@protoc_insertion_point(field_get:proto.GeoGrid.Location.Coordinate.longitude)
  return longitude_;
}
inline void GeoGrid_Location_Coordinate::set_longitude(double value) {

  longitude_ = value;
  // @@protoc_insertion_point(field_set:proto.GeoGrid.Location.Coordinate.longitude)
}

// double latitude = 2;
inline void GeoGrid_Location_Coordinate::clear_latitude() {
  latitude_ = 0;
}
inline double GeoGrid_Location_Coordinate::latitude() const {
  // @@protoc_insertion_point(field_get:proto.GeoGrid.Location.Coordinate.latitude)
  return latitude_;
}
inline void GeoGrid_Location_Coordinate::set_latitude(double value) {

  latitude_ = value;
  // @@protoc_insertion_point(field_set:proto.GeoGrid.Location.Coordinate.latitude)
}

// -------------------------------------------------------------------

// GeoGrid_Location_ContactPools_ContactPool

// int64 id = 1;
inline void GeoGrid_Location_ContactPools_ContactPool::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GeoGrid_Location_ContactPools_ContactPool::id() const {
  // @@protoc_insertion_point(field_get:proto.GeoGrid.Location.ContactPools.ContactPool.id)
  return id_;
}
inline void GeoGrid_Location_ContactPools_ContactPool::set_id(::google::protobuf::int64 value) {

  id_ = value;
  // @@protoc_insertion_point(field_set:proto.GeoGrid.Location.ContactPools.ContactPool.id)
}

// repeated int64 people = 2;
inline int GeoGrid_Location_ContactPools_ContactPool::people_size() const {
  return people_.size();
}
inline void GeoGrid_Location_ContactPools_ContactPool::clear_people() {
  people_.Clear();
}
inline ::google::protobuf::int64 GeoGrid_Location_ContactPools_ContactPool::people(int index) const {
  // @@protoc_insertion_point(field_get:proto.GeoGrid.Location.ContactPools.ContactPool.people)
  return people_.Get(index);
}
inline void GeoGrid_Location_ContactPools_ContactPool::set_people(int index, ::google::protobuf::int64 value) {
  people_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GeoGrid.Location.ContactPools.ContactPool.people)
}
inline void GeoGrid_Location_ContactPools_ContactPool::add_people(::google::protobuf::int64 value) {
  people_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GeoGrid.Location.ContactPools.ContactPool.people)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
GeoGrid_Location_ContactPools_ContactPool::people() const {
  // @@protoc_insertion_point(field_list:proto.GeoGrid.Location.ContactPools.ContactPool.people)
  return people_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
GeoGrid_Location_ContactPools_ContactPool::mutable_people() {
  // @@protoc_insertion_point(field_mutable_list:proto.GeoGrid.Location.ContactPools.ContactPool.people)
  return &people_;
}

// -------------------------------------------------------------------

// GeoGrid_Location_ContactPools

// int64 id = 1;
inline void GeoGrid_Location_ContactPools::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GeoGrid_Location_ContactPools::id() const {
  // @@protoc_insertion_point(field_get:proto.GeoGrid.Location.ContactPools.id)
  return id_;
}
inline void GeoGrid_Location_ContactPools::set_id(::google::protobuf::int64 value) {

  id_ = value;
  // @@protoc_insertion_point(field_set:proto.GeoGrid.Location.ContactPools.id)
}

// .proto.GeoGrid.Location.ContactPools.Type type = 2;
inline void GeoGrid_Location_ContactPools::clear_type() {
  type_ = 0;
}
inline ::proto::GeoGrid_Location_ContactPools_Type GeoGrid_Location_ContactPools::type() const {
  // @@protoc_insertion_point(field_get:proto.GeoGrid.Location.ContactPools.type)
  return static_cast< ::proto::GeoGrid_Location_ContactPools_Type >(type_);
}
inline void GeoGrid_Location_ContactPools::set_type(::proto::GeoGrid_Location_ContactPools_Type value) {

  type_ = value;
  // @@protoc_insertion_point(field_set:proto.GeoGrid.Location.ContactPools.type)
}

// repeated .proto.GeoGrid.Location.ContactPools.ContactPool pools = 3;
inline int GeoGrid_Location_ContactPools::pools_size() const {
  return pools_.size();
}
inline void GeoGrid_Location_ContactPools::clear_pools() {
  pools_.Clear();
}
inline ::proto::GeoGrid_Location_ContactPools_ContactPool* GeoGrid_Location_ContactPools::mutable_pools(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GeoGrid.Location.ContactPools.pools)
  return pools_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GeoGrid_Location_ContactPools_ContactPool >*
GeoGrid_Location_ContactPools::mutable_pools() {
  // @@protoc_insertion_point(field_mutable_list:proto.GeoGrid.Location.ContactPools.pools)
  return &pools_;
}
inline const ::proto::GeoGrid_Location_ContactPools_ContactPool& GeoGrid_Location_ContactPools::pools(int index) const {
  // @@protoc_insertion_point(field_get:proto.GeoGrid.Location.ContactPools.pools)
  return pools_.Get(index);
}
inline ::proto::GeoGrid_Location_ContactPools_ContactPool* GeoGrid_Location_ContactPools::add_pools() {
  // @@protoc_insertion_point(field_add:proto.GeoGrid.Location.ContactPools.pools)
  return pools_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GeoGrid_Location_ContactPools_ContactPool >&
GeoGrid_Location_ContactPools::pools() const {
  // @@protoc_insertion_point(field_list:proto.GeoGrid.Location.ContactPools.pools)
  return pools_;
}

// -------------------------------------------------------------------

// GeoGrid_Location_Commute

// int64 to = 1;
inline void GeoGrid_Location_Commute::clear_to() {
  to_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GeoGrid_Location_Commute::to() const {
  // @@protoc_insertion_point(field_get:proto.GeoGrid.Location.Commute.to)
  return to_;
}
inline void GeoGrid_Location_Commute::set_to(::google::protobuf::int64 value) {

  to_ = value;
  // @@protoc_insertion_point(field_set:proto.GeoGrid.Location.Commute.to)
}

// double proportion = 2;
inline void GeoGrid_Location_Commute::clear_proportion() {
  proportion_ = 0;
}
inline double GeoGrid_Location_Commute::proportion() const {
  // @@protoc_insertion_point(field_get:proto.GeoGrid.Location.Commute.proportion)
  return proportion_;
}
inline void GeoGrid_Location_Commute::set_proportion(double value) {

  proportion_ = value;
  // @@protoc_insertion_point(field_set:proto.GeoGrid.Location.Commute.proportion)
}

// -------------------------------------------------------------------

// GeoGrid_Location

// int64 id = 1;
inline void GeoGrid_Location::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GeoGrid_Location::id() const {
  // @@protoc_insertion_point(field_get:proto.GeoGrid.Location.id)
  return id_;
}
inline void GeoGrid_Location::set_id(::google::protobuf::int64 value) {

  id_ = value;
  // @@protoc_insertion_point(field_set:proto.GeoGrid.Location.id)
}

// string name = 2;
inline void GeoGrid_Location::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GeoGrid_Location::name() const {
  // @@protoc_insertion_point(field_get:proto.GeoGrid.Location.name)
  return name_.GetNoArena();
}
inline void GeoGrid_Location::set_name(const ::std::string& value) {

  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.GeoGrid.Location.name)
}
#if LANG_CXX11
inline void GeoGrid_Location::set_name(::std::string&& value) {

  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.GeoGrid.Location.name)
}
#endif
inline void GeoGrid_Location::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.GeoGrid.Location.name)
}
inline void GeoGrid_Location::set_name(const char* value, size_t size) {

  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.GeoGrid.Location.name)
}
inline ::std::string* GeoGrid_Location::mutable_name() {

  // @@protoc_insertion_point(field_mutable:proto.GeoGrid.Location.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GeoGrid_Location::release_name() {
  // @@protoc_insertion_point(field_release:proto.GeoGrid.Location.name)

  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GeoGrid_Location::set_allocated_name(::std::string* name) {
  if (name != nullptr) {

  } else {

  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.GeoGrid.Location.name)
}

// int64 province = 3;
inline void GeoGrid_Location::clear_province() {
  province_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GeoGrid_Location::province() const {
  // @@protoc_insertion_point(field_get:proto.GeoGrid.Location.province)
  return province_;
}
inline void GeoGrid_Location::set_province(::google::protobuf::int64 value) {

  province_ = value;
  // @@protoc_insertion_point(field_set:proto.GeoGrid.Location.province)
}

// int64 population = 4;
inline void GeoGrid_Location::clear_population() {
  population_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GeoGrid_Location::population() const {
  // @@protoc_insertion_point(field_get:proto.GeoGrid.Location.population)
  return population_;
}
inline void GeoGrid_Location::set_population(::google::protobuf::int64 value) {

  population_ = value;
  // @@protoc_insertion_point(field_set:proto.GeoGrid.Location.population)
}

// .proto.GeoGrid.Location.Coordinate coordinate = 5;
inline bool GeoGrid_Location::has_coordinate() const {
  return this != internal_default_instance() && coordinate_ != nullptr;
}
inline void GeoGrid_Location::clear_coordinate() {
  if (GetArenaNoVirtual() == nullptr && coordinate_ != nullptr) {
    delete coordinate_;
  }
  coordinate_ = nullptr;
}
inline const ::proto::GeoGrid_Location_Coordinate& GeoGrid_Location::coordinate() const {
  const ::proto::GeoGrid_Location_Coordinate* p = coordinate_;
  // @@protoc_insertion_point(field_get:proto.GeoGrid.Location.coordinate)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::GeoGrid_Location_Coordinate*>(
      &::proto::_GeoGrid_Location_Coordinate_default_instance_);
}
inline ::proto::GeoGrid_Location_Coordinate* GeoGrid_Location::release_coordinate() {
  // @@protoc_insertion_point(field_release:proto.GeoGrid.Location.coordinate)

  ::proto::GeoGrid_Location_Coordinate* temp = coordinate_;
  coordinate_ = nullptr;
  return temp;
}
inline ::proto::GeoGrid_Location_Coordinate* GeoGrid_Location::mutable_coordinate() {

  if (coordinate_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::GeoGrid_Location_Coordinate>(GetArenaNoVirtual());
    coordinate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.GeoGrid.Location.coordinate)
  return coordinate_;
}
inline void GeoGrid_Location::set_allocated_coordinate(::proto::GeoGrid_Location_Coordinate* coordinate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete coordinate_;
  }
  if (coordinate) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      coordinate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, coordinate, submessage_arena);
    }

  } else {

  }
  coordinate_ = coordinate;
  // @@protoc_insertion_point(field_set_allocated:proto.GeoGrid.Location.coordinate)
}

// repeated .proto.GeoGrid.Location.ContactPools contactPools = 6;
inline int GeoGrid_Location::contactpools_size() const {
  return contactpools_.size();
}
inline void GeoGrid_Location::clear_contactpools() {
  contactpools_.Clear();
}
inline ::proto::GeoGrid_Location_ContactPools* GeoGrid_Location::mutable_contactpools(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GeoGrid.Location.contactPools)
  return contactpools_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GeoGrid_Location_ContactPools >*
GeoGrid_Location::mutable_contactpools() {
  // @@protoc_insertion_point(field_mutable_list:proto.GeoGrid.Location.contactPools)
  return &contactpools_;
}
inline const ::proto::GeoGrid_Location_ContactPools& GeoGrid_Location::contactpools(int index) const {
  // @@protoc_insertion_point(field_get:proto.GeoGrid.Location.contactPools)
  return contactpools_.Get(index);
}
inline ::proto::GeoGrid_Location_ContactPools* GeoGrid_Location::add_contactpools() {
  // @@protoc_insertion_point(field_add:proto.GeoGrid.Location.contactPools)
  return contactpools_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GeoGrid_Location_ContactPools >&
GeoGrid_Location::contactpools() const {
  // @@protoc_insertion_point(field_list:proto.GeoGrid.Location.contactPools)
  return contactpools_;
}

// repeated .proto.GeoGrid.Location.Commute commutes = 7;
inline int GeoGrid_Location::commutes_size() const {
  return commutes_.size();
}
inline void GeoGrid_Location::clear_commutes() {
  commutes_.Clear();
}
inline ::proto::GeoGrid_Location_Commute* GeoGrid_Location::mutable_commutes(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GeoGrid.Location.commutes)
  return commutes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GeoGrid_Location_Commute >*
GeoGrid_Location::mutable_commutes() {
  // @@protoc_insertion_point(field_mutable_list:proto.GeoGrid.Location.commutes)
  return &commutes_;
}
inline const ::proto::GeoGrid_Location_Commute& GeoGrid_Location::commutes(int index) const {
  // @@protoc_insertion_point(field_get:proto.GeoGrid.Location.commutes)
  return commutes_.Get(index);
}
inline ::proto::GeoGrid_Location_Commute* GeoGrid_Location::add_commutes() {
  // @@protoc_insertion_point(field_add:proto.GeoGrid.Location.commutes)
  return commutes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GeoGrid_Location_Commute >&
GeoGrid_Location::commutes() const {
  // @@protoc_insertion_point(field_list:proto.GeoGrid.Location.commutes)
  return commutes_;
}

// -------------------------------------------------------------------

// GeoGrid_Person

// int64 id = 1;
inline void GeoGrid_Person::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GeoGrid_Person::id() const {
  // @@protoc_insertion_point(field_get:proto.GeoGrid.Person.id)
  return id_;
}
inline void GeoGrid_Person::set_id(::google::protobuf::int64 value) {

  id_ = value;
  // @@protoc_insertion_point(field_set:proto.GeoGrid.Person.id)
}

// int64 age = 2;
inline void GeoGrid_Person::clear_age() {
  age_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GeoGrid_Person::age() const {
  // @@protoc_insertion_point(field_get:proto.GeoGrid.Person.age)
  return age_;
}
inline void GeoGrid_Person::set_age(::google::protobuf::int64 value) {

  age_ = value;
  // @@protoc_insertion_point(field_set:proto.GeoGrid.Person.age)
}

// -------------------------------------------------------------------

// GeoGrid

// repeated .proto.GeoGrid.Location locations = 1;
inline int GeoGrid::locations_size() const {
  return locations_.size();
}
inline void GeoGrid::clear_locations() {
  locations_.Clear();
}
inline ::proto::GeoGrid_Location* GeoGrid::mutable_locations(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GeoGrid.locations)
  return locations_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GeoGrid_Location >*
GeoGrid::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:proto.GeoGrid.locations)
  return &locations_;
}
inline const ::proto::GeoGrid_Location& GeoGrid::locations(int index) const {
  // @@protoc_insertion_point(field_get:proto.GeoGrid.locations)
  return locations_.Get(index);
}
inline ::proto::GeoGrid_Location* GeoGrid::add_locations() {
  // @@protoc_insertion_point(field_add:proto.GeoGrid.locations)
  return locations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GeoGrid_Location >&
GeoGrid::locations() const {
  // @@protoc_insertion_point(field_list:proto.GeoGrid.locations)
  return locations_;
}

// repeated .proto.GeoGrid.Person persons = 2;
inline int GeoGrid::persons_size() const {
  return persons_.size();
}
inline void GeoGrid::clear_persons() {
  persons_.Clear();
}
inline ::proto::GeoGrid_Person* GeoGrid::mutable_persons(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GeoGrid.persons)
  return persons_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GeoGrid_Person >*
GeoGrid::mutable_persons() {
  // @@protoc_insertion_point(field_mutable_list:proto.GeoGrid.persons)
  return &persons_;
}
inline const ::proto::GeoGrid_Person& GeoGrid::persons(int index) const {
  // @@protoc_insertion_point(field_get:proto.GeoGrid.persons)
  return persons_.Get(index);
}
inline ::proto::GeoGrid_Person* GeoGrid::add_persons() {
  // @@protoc_insertion_point(field_add:proto.GeoGrid.persons)
  return persons_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GeoGrid_Person >&
GeoGrid::persons() const {
  // @@protoc_insertion_point(field_list:proto.GeoGrid.persons)
  return persons_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::GeoGrid_Location_ContactPools_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::GeoGrid_Location_ContactPools_Type>() {
  return ::proto::GeoGrid_Location_ContactPools_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_geogrid_2eproto
