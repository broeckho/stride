// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geogrid.proto

#include "geogrid.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_geogrid_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GeoGrid_Location_Commute_geogrid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geogrid_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GeoGrid_Location_ContactPools_ContactPool_geogrid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geogrid_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GeoGrid_Location_Coordinate_geogrid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geogrid_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GeoGrid_Person_geogrid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geogrid_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GeoGrid_Location_ContactPools_geogrid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geogrid_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_GeoGrid_Location_geogrid_2eproto;
namespace proto {
class GeoGrid_Location_CoordinateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GeoGrid_Location_Coordinate> _instance;
} _GeoGrid_Location_Coordinate_default_instance_;
class GeoGrid_Location_ContactPools_ContactPoolDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GeoGrid_Location_ContactPools_ContactPool> _instance;
} _GeoGrid_Location_ContactPools_ContactPool_default_instance_;
class GeoGrid_Location_ContactPoolsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GeoGrid_Location_ContactPools> _instance;
} _GeoGrid_Location_ContactPools_default_instance_;
class GeoGrid_Location_CommuteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GeoGrid_Location_Commute> _instance;
} _GeoGrid_Location_Commute_default_instance_;
class GeoGrid_LocationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GeoGrid_Location> _instance;
} _GeoGrid_Location_default_instance_;
class GeoGrid_PersonDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GeoGrid_Person> _instance;
} _GeoGrid_Person_default_instance_;
class GeoGridDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GeoGrid> _instance;
} _GeoGrid_default_instance_;
}  // namespace proto
static void InitDefaultsGeoGrid_Location_Coordinate_geogrid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_GeoGrid_Location_Coordinate_default_instance_;
    new (ptr) ::proto::GeoGrid_Location_Coordinate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::GeoGrid_Location_Coordinate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GeoGrid_Location_Coordinate_geogrid_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGeoGrid_Location_Coordinate_geogrid_2eproto}, {}};

static void InitDefaultsGeoGrid_Location_ContactPools_ContactPool_geogrid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_GeoGrid_Location_ContactPools_ContactPool_default_instance_;
    new (ptr) ::proto::GeoGrid_Location_ContactPools_ContactPool();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::GeoGrid_Location_ContactPools_ContactPool::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GeoGrid_Location_ContactPools_ContactPool_geogrid_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGeoGrid_Location_ContactPools_ContactPool_geogrid_2eproto}, {}};

static void InitDefaultsGeoGrid_Location_ContactPools_geogrid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_GeoGrid_Location_ContactPools_default_instance_;
    new (ptr) ::proto::GeoGrid_Location_ContactPools();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::GeoGrid_Location_ContactPools::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GeoGrid_Location_ContactPools_geogrid_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGeoGrid_Location_ContactPools_geogrid_2eproto}, {
      &scc_info_GeoGrid_Location_ContactPools_ContactPool_geogrid_2eproto.base,}};

static void InitDefaultsGeoGrid_Location_Commute_geogrid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_GeoGrid_Location_Commute_default_instance_;
    new (ptr) ::proto::GeoGrid_Location_Commute();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::GeoGrid_Location_Commute::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GeoGrid_Location_Commute_geogrid_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGeoGrid_Location_Commute_geogrid_2eproto}, {}};

static void InitDefaultsGeoGrid_Location_geogrid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_GeoGrid_Location_default_instance_;
    new (ptr) ::proto::GeoGrid_Location();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::GeoGrid_Location::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_GeoGrid_Location_geogrid_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsGeoGrid_Location_geogrid_2eproto}, {
      &scc_info_GeoGrid_Location_Coordinate_geogrid_2eproto.base,
      &scc_info_GeoGrid_Location_ContactPools_geogrid_2eproto.base,
      &scc_info_GeoGrid_Location_Commute_geogrid_2eproto.base,}};

static void InitDefaultsGeoGrid_Person_geogrid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_GeoGrid_Person_default_instance_;
    new (ptr) ::proto::GeoGrid_Person();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::GeoGrid_Person::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GeoGrid_Person_geogrid_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGeoGrid_Person_geogrid_2eproto}, {}};

static void InitDefaultsGeoGrid_geogrid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_GeoGrid_default_instance_;
    new (ptr) ::proto::GeoGrid();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::GeoGrid::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GeoGrid_geogrid_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGeoGrid_geogrid_2eproto}, {
      &scc_info_GeoGrid_Location_geogrid_2eproto.base,
      &scc_info_GeoGrid_Person_geogrid_2eproto.base,}};

void InitDefaults_geogrid_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_GeoGrid_Location_Coordinate_geogrid_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GeoGrid_Location_ContactPools_ContactPool_geogrid_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GeoGrid_Location_ContactPools_geogrid_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GeoGrid_Location_Commute_geogrid_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GeoGrid_Location_geogrid_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GeoGrid_Person_geogrid_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GeoGrid_geogrid_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_geogrid_2eproto[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_geogrid_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_geogrid_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_geogrid_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::GeoGrid_Location_Coordinate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::GeoGrid_Location_Coordinate, longitude_),
  PROTOBUF_FIELD_OFFSET(::proto::GeoGrid_Location_Coordinate, latitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::GeoGrid_Location_ContactPools_ContactPool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::GeoGrid_Location_ContactPools_ContactPool, id_),
  PROTOBUF_FIELD_OFFSET(::proto::GeoGrid_Location_ContactPools_ContactPool, people_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::GeoGrid_Location_ContactPools, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::GeoGrid_Location_ContactPools, id_),
  PROTOBUF_FIELD_OFFSET(::proto::GeoGrid_Location_ContactPools, type_),
  PROTOBUF_FIELD_OFFSET(::proto::GeoGrid_Location_ContactPools, pools_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::GeoGrid_Location_Commute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::GeoGrid_Location_Commute, to_),
  PROTOBUF_FIELD_OFFSET(::proto::GeoGrid_Location_Commute, proportion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::GeoGrid_Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::GeoGrid_Location, id_),
  PROTOBUF_FIELD_OFFSET(::proto::GeoGrid_Location, name_),
  PROTOBUF_FIELD_OFFSET(::proto::GeoGrid_Location, province_),
  PROTOBUF_FIELD_OFFSET(::proto::GeoGrid_Location, population_),
  PROTOBUF_FIELD_OFFSET(::proto::GeoGrid_Location, coordinate_),
  PROTOBUF_FIELD_OFFSET(::proto::GeoGrid_Location, contactpools_),
  PROTOBUF_FIELD_OFFSET(::proto::GeoGrid_Location, commutes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::GeoGrid_Person, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::GeoGrid_Person, id_),
  PROTOBUF_FIELD_OFFSET(::proto::GeoGrid_Person, age_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::GeoGrid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::GeoGrid, locations_),
  PROTOBUF_FIELD_OFFSET(::proto::GeoGrid, persons_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::proto::GeoGrid_Location_Coordinate)},
  { 7, -1, sizeof(::proto::GeoGrid_Location_ContactPools_ContactPool)},
  { 14, -1, sizeof(::proto::GeoGrid_Location_ContactPools)},
  { 22, -1, sizeof(::proto::GeoGrid_Location_Commute)},
  { 29, -1, sizeof(::proto::GeoGrid_Location)},
  { 41, -1, sizeof(::proto::GeoGrid_Person)},
  { 48, -1, sizeof(::proto::GeoGrid)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::_GeoGrid_Location_Coordinate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::_GeoGrid_Location_ContactPools_ContactPool_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::_GeoGrid_Location_ContactPools_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::_GeoGrid_Location_Commute_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::_GeoGrid_Location_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::_GeoGrid_Person_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::_GeoGrid_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_geogrid_2eproto = {
  {}, AddDescriptors_geogrid_2eproto, "geogrid.proto", schemas,
  file_default_instances, TableStruct_geogrid_2eproto::offsets,
  file_level_metadata_geogrid_2eproto, 7, file_level_enum_descriptors_geogrid_2eproto, file_level_service_descriptors_geogrid_2eproto,
};

const char descriptor_table_protodef_geogrid_2eproto[] =
  "\n\rgeogrid.proto\022\005proto\"\204\006\n\007GeoGrid\022*\n\tlo"
  "cations\030\001 \003(\0132\027.proto.GeoGrid.Location\022&"
  "\n\007persons\030\002 \003(\0132\025.proto.GeoGrid.Person\032\201"
  "\005\n\010Location\022\n\n\002id\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\022\020\n"
  "\010province\030\003 \001(\003\022\022\n\npopulation\030\004 \001(\003\0226\n\nc"
  "oordinate\030\005 \001(\0132\".proto.GeoGrid.Location"
  ".Coordinate\022:\n\014contactPools\030\006 \003(\0132$.prot"
  "o.GeoGrid.Location.ContactPools\0221\n\010commu"
  "tes\030\007 \003(\0132\037.proto.GeoGrid.Location.Commu"
  "te\0321\n\nCoordinate\022\021\n\tlongitude\030\001 \001(\001\022\020\n\010l"
  "atitude\030\002 \001(\001\032\257\002\n\014ContactPools\022\n\n\002id\030\001 \001"
  "(\003\0227\n\004type\030\002 \001(\0162).proto.GeoGrid.Locatio"
  "n.ContactPools.Type\022\?\n\005pools\030\003 \003(\01320.pro"
  "to.GeoGrid.Location.ContactPools.Contact"
  "Pool\032)\n\013ContactPool\022\n\n\002id\030\001 \001(\003\022\016\n\006peopl"
  "e\030\002 \003(\003\"n\n\004Type\022\r\n\tK12School\020\000\022\024\n\020Primar"
  "yCommunity\020\001\022\026\n\022SecondaryCommunity\020\002\022\013\n\007"
  "College\020\003\022\r\n\tHousehold\020\004\022\r\n\tWorkplace\020\005\032"
  ")\n\007Commute\022\n\n\002to\030\001 \001(\003\022\022\n\nproportion\030\002 \001"
  "(\001\032!\n\006Person\022\n\n\002id\030\001 \001(\003\022\013\n\003age\030\002 \001(\003b\006p"
  "roto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_geogrid_2eproto = {
  false, InitDefaults_geogrid_2eproto, 
  descriptor_table_protodef_geogrid_2eproto,
  "geogrid.proto", &assign_descriptors_table_geogrid_2eproto, 805,
};

void AddDescriptors_geogrid_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_geogrid_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_geogrid_2eproto = []() { AddDescriptors_geogrid_2eproto(); return true; }();
namespace proto {
const ::google::protobuf::EnumDescriptor* GeoGrid_Location_ContactPools_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_geogrid_2eproto);
  return file_level_enum_descriptors_geogrid_2eproto[0];
}
bool GeoGrid_Location_ContactPools_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GeoGrid_Location_ContactPools_Type GeoGrid_Location_ContactPools::K12School;
const GeoGrid_Location_ContactPools_Type GeoGrid_Location_ContactPools::PrimaryCommunity;
const GeoGrid_Location_ContactPools_Type GeoGrid_Location_ContactPools::SecondaryCommunity;
const GeoGrid_Location_ContactPools_Type GeoGrid_Location_ContactPools::College;
const GeoGrid_Location_ContactPools_Type GeoGrid_Location_ContactPools::Household;
const GeoGrid_Location_ContactPools_Type GeoGrid_Location_ContactPools::Workplace;
const GeoGrid_Location_ContactPools_Type GeoGrid_Location_ContactPools::Type_MIN;
const GeoGrid_Location_ContactPools_Type GeoGrid_Location_ContactPools::Type_MAX;
const int GeoGrid_Location_ContactPools::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void GeoGrid_Location_Coordinate::InitAsDefaultInstance() {
}
class GeoGrid_Location_Coordinate::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeoGrid_Location_Coordinate::kLongitudeFieldNumber;
const int GeoGrid_Location_Coordinate::kLatitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeoGrid_Location_Coordinate::GeoGrid_Location_Coordinate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GeoGrid.Location.Coordinate)
}
GeoGrid_Location_Coordinate::GeoGrid_Location_Coordinate(const GeoGrid_Location_Coordinate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&longitude_, &from.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&latitude_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
  // @@protoc_insertion_point(copy_constructor:proto.GeoGrid.Location.Coordinate)
}

void GeoGrid_Location_Coordinate::SharedCtor() {
  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latitude_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
}

GeoGrid_Location_Coordinate::~GeoGrid_Location_Coordinate() {
  // @@protoc_insertion_point(destructor:proto.GeoGrid.Location.Coordinate)
  SharedDtor();
}

void GeoGrid_Location_Coordinate::SharedDtor() {
}

void GeoGrid_Location_Coordinate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoGrid_Location_Coordinate& GeoGrid_Location_Coordinate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GeoGrid_Location_Coordinate_geogrid_2eproto.base);
  return *internal_default_instance();
}


void GeoGrid_Location_Coordinate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GeoGrid.Location.Coordinate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latitude_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GeoGrid_Location_Coordinate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GeoGrid_Location_Coordinate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // double longitude = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_longitude(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double latitude = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_latitude(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GeoGrid_Location_Coordinate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GeoGrid.Location.Coordinate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double longitude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double latitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GeoGrid.Location.Coordinate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GeoGrid.Location.Coordinate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GeoGrid_Location_Coordinate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GeoGrid.Location.Coordinate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double longitude = 1;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->longitude(), output);
  }

  // double latitude = 2;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->latitude(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GeoGrid.Location.Coordinate)
}

::google::protobuf::uint8* GeoGrid_Location_Coordinate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.GeoGrid.Location.Coordinate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double longitude = 1;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->longitude(), target);
  }

  // double latitude = 2;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->latitude(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GeoGrid.Location.Coordinate)
  return target;
}

size_t GeoGrid_Location_Coordinate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GeoGrid.Location.Coordinate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double longitude = 1;
  if (this->longitude() != 0) {
    total_size += 1 + 8;
  }

  // double latitude = 2;
  if (this->latitude() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoGrid_Location_Coordinate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GeoGrid.Location.Coordinate)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoGrid_Location_Coordinate* source =
      ::google::protobuf::DynamicCastToGenerated<GeoGrid_Location_Coordinate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GeoGrid.Location.Coordinate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GeoGrid.Location.Coordinate)
    MergeFrom(*source);
  }
}

void GeoGrid_Location_Coordinate::MergeFrom(const GeoGrid_Location_Coordinate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GeoGrid.Location.Coordinate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
}

void GeoGrid_Location_Coordinate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GeoGrid.Location.Coordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoGrid_Location_Coordinate::CopyFrom(const GeoGrid_Location_Coordinate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GeoGrid.Location.Coordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoGrid_Location_Coordinate::IsInitialized() const {
  return true;
}

void GeoGrid_Location_Coordinate::Swap(GeoGrid_Location_Coordinate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeoGrid_Location_Coordinate::InternalSwap(GeoGrid_Location_Coordinate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
}

::google::protobuf::Metadata GeoGrid_Location_Coordinate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_geogrid_2eproto);
  return ::file_level_metadata_geogrid_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GeoGrid_Location_ContactPools_ContactPool::InitAsDefaultInstance() {
}
class GeoGrid_Location_ContactPools_ContactPool::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeoGrid_Location_ContactPools_ContactPool::kIdFieldNumber;
const int GeoGrid_Location_ContactPools_ContactPool::kPeopleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeoGrid_Location_ContactPools_ContactPool::GeoGrid_Location_ContactPools_ContactPool()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GeoGrid.Location.ContactPools.ContactPool)
}
GeoGrid_Location_ContactPools_ContactPool::GeoGrid_Location_ContactPools_ContactPool(const GeoGrid_Location_ContactPools_ContactPool& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      people_(from.people_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:proto.GeoGrid.Location.ContactPools.ContactPool)
}

void GeoGrid_Location_ContactPools_ContactPool::SharedCtor() {
  id_ = PROTOBUF_LONGLONG(0);
}

GeoGrid_Location_ContactPools_ContactPool::~GeoGrid_Location_ContactPools_ContactPool() {
  // @@protoc_insertion_point(destructor:proto.GeoGrid.Location.ContactPools.ContactPool)
  SharedDtor();
}

void GeoGrid_Location_ContactPools_ContactPool::SharedDtor() {
}

void GeoGrid_Location_ContactPools_ContactPool::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoGrid_Location_ContactPools_ContactPool& GeoGrid_Location_ContactPools_ContactPool::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GeoGrid_Location_ContactPools_ContactPool_geogrid_2eproto.base);
  return *internal_default_instance();
}


void GeoGrid_Location_ContactPools_ContactPool::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GeoGrid.Location.ContactPools.ContactPool)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  people_.Clear();
  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GeoGrid_Location_ContactPools_ContactPool::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GeoGrid_Location_ContactPools_ContactPool*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated int64 people = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 18) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt64Parser;
          object = msg->mutable_people();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        do {
          msg->add_people(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GeoGrid_Location_ContactPools_ContactPool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GeoGrid.Location.ContactPools.ContactPool)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 people = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_people())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 18u, input, this->mutable_people())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GeoGrid.Location.ContactPools.ContactPool)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GeoGrid.Location.ContactPools.ContactPool)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GeoGrid_Location_ContactPools_ContactPool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GeoGrid.Location.ContactPools.ContactPool)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // repeated int64 people = 2;
  if (this->people_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_people_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->people_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->people(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GeoGrid.Location.ContactPools.ContactPool)
}

::google::protobuf::uint8* GeoGrid_Location_ContactPools_ContactPool::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.GeoGrid.Location.ContactPools.ContactPool)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // repeated int64 people = 2;
  if (this->people_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _people_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->people_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GeoGrid.Location.ContactPools.ContactPool)
  return target;
}

size_t GeoGrid_Location_ContactPools_ContactPool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GeoGrid.Location.ContactPools.ContactPool)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 people = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->people_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _people_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoGrid_Location_ContactPools_ContactPool::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GeoGrid.Location.ContactPools.ContactPool)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoGrid_Location_ContactPools_ContactPool* source =
      ::google::protobuf::DynamicCastToGenerated<GeoGrid_Location_ContactPools_ContactPool>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GeoGrid.Location.ContactPools.ContactPool)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GeoGrid.Location.ContactPools.ContactPool)
    MergeFrom(*source);
  }
}

void GeoGrid_Location_ContactPools_ContactPool::MergeFrom(const GeoGrid_Location_ContactPools_ContactPool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GeoGrid.Location.ContactPools.ContactPool)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  people_.MergeFrom(from.people_);
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void GeoGrid_Location_ContactPools_ContactPool::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GeoGrid.Location.ContactPools.ContactPool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoGrid_Location_ContactPools_ContactPool::CopyFrom(const GeoGrid_Location_ContactPools_ContactPool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GeoGrid.Location.ContactPools.ContactPool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoGrid_Location_ContactPools_ContactPool::IsInitialized() const {
  return true;
}

void GeoGrid_Location_ContactPools_ContactPool::Swap(GeoGrid_Location_ContactPools_ContactPool* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeoGrid_Location_ContactPools_ContactPool::InternalSwap(GeoGrid_Location_ContactPools_ContactPool* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  people_.InternalSwap(&other->people_);
  swap(id_, other->id_);
}

::google::protobuf::Metadata GeoGrid_Location_ContactPools_ContactPool::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_geogrid_2eproto);
  return ::file_level_metadata_geogrid_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GeoGrid_Location_ContactPools::InitAsDefaultInstance() {
}
class GeoGrid_Location_ContactPools::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeoGrid_Location_ContactPools::kIdFieldNumber;
const int GeoGrid_Location_ContactPools::kTypeFieldNumber;
const int GeoGrid_Location_ContactPools::kPoolsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeoGrid_Location_ContactPools::GeoGrid_Location_ContactPools()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GeoGrid.Location.ContactPools)
}
GeoGrid_Location_ContactPools::GeoGrid_Location_ContactPools(const GeoGrid_Location_ContactPools& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      pools_(from.pools_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:proto.GeoGrid.Location.ContactPools)
}

void GeoGrid_Location_ContactPools::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GeoGrid_Location_ContactPools_geogrid_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

GeoGrid_Location_ContactPools::~GeoGrid_Location_ContactPools() {
  // @@protoc_insertion_point(destructor:proto.GeoGrid.Location.ContactPools)
  SharedDtor();
}

void GeoGrid_Location_ContactPools::SharedDtor() {
}

void GeoGrid_Location_ContactPools::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoGrid_Location_ContactPools& GeoGrid_Location_ContactPools::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GeoGrid_Location_ContactPools_geogrid_2eproto.base);
  return *internal_default_instance();
}


void GeoGrid_Location_ContactPools::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GeoGrid.Location.ContactPools)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pools_.Clear();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GeoGrid_Location_ContactPools::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GeoGrid_Location_ContactPools*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .proto.GeoGrid.Location.ContactPools.Type type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::proto::GeoGrid_Location_ContactPools_Type>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.GeoGrid.Location.ContactPools.ContactPool pools = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::GeoGrid_Location_ContactPools_ContactPool::_InternalParse;
          object = msg->add_pools();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GeoGrid_Location_ContactPools::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GeoGrid.Location.ContactPools)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GeoGrid.Location.ContactPools.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::proto::GeoGrid_Location_ContactPools_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GeoGrid.Location.ContactPools.ContactPool pools = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_pools()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GeoGrid.Location.ContactPools)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GeoGrid.Location.ContactPools)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GeoGrid_Location_ContactPools::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GeoGrid.Location.ContactPools)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // .proto.GeoGrid.Location.ContactPools.Type type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // repeated .proto.GeoGrid.Location.ContactPools.ContactPool pools = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pools_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->pools(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GeoGrid.Location.ContactPools)
}

::google::protobuf::uint8* GeoGrid_Location_ContactPools::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.GeoGrid.Location.ContactPools)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // .proto.GeoGrid.Location.ContactPools.Type type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // repeated .proto.GeoGrid.Location.ContactPools.ContactPool pools = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pools_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->pools(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GeoGrid.Location.ContactPools)
  return target;
}

size_t GeoGrid_Location_ContactPools::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GeoGrid.Location.ContactPools)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.GeoGrid.Location.ContactPools.ContactPool pools = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->pools_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->pools(static_cast<int>(i)));
    }
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // .proto.GeoGrid.Location.ContactPools.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoGrid_Location_ContactPools::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GeoGrid.Location.ContactPools)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoGrid_Location_ContactPools* source =
      ::google::protobuf::DynamicCastToGenerated<GeoGrid_Location_ContactPools>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GeoGrid.Location.ContactPools)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GeoGrid.Location.ContactPools)
    MergeFrom(*source);
  }
}

void GeoGrid_Location_ContactPools::MergeFrom(const GeoGrid_Location_ContactPools& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GeoGrid.Location.ContactPools)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pools_.MergeFrom(from.pools_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void GeoGrid_Location_ContactPools::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GeoGrid.Location.ContactPools)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoGrid_Location_ContactPools::CopyFrom(const GeoGrid_Location_ContactPools& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GeoGrid.Location.ContactPools)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoGrid_Location_ContactPools::IsInitialized() const {
  return true;
}

void GeoGrid_Location_ContactPools::Swap(GeoGrid_Location_ContactPools* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeoGrid_Location_ContactPools::InternalSwap(GeoGrid_Location_ContactPools* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&pools_)->InternalSwap(CastToBase(&other->pools_));
  swap(id_, other->id_);
  swap(type_, other->type_);
}

::google::protobuf::Metadata GeoGrid_Location_ContactPools::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_geogrid_2eproto);
  return ::file_level_metadata_geogrid_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GeoGrid_Location_Commute::InitAsDefaultInstance() {
}
class GeoGrid_Location_Commute::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeoGrid_Location_Commute::kToFieldNumber;
const int GeoGrid_Location_Commute::kProportionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeoGrid_Location_Commute::GeoGrid_Location_Commute()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GeoGrid.Location.Commute)
}
GeoGrid_Location_Commute::GeoGrid_Location_Commute(const GeoGrid_Location_Commute& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&to_, &from.to_,
    static_cast<size_t>(reinterpret_cast<char*>(&proportion_) -
    reinterpret_cast<char*>(&to_)) + sizeof(proportion_));
  // @@protoc_insertion_point(copy_constructor:proto.GeoGrid.Location.Commute)
}

void GeoGrid_Location_Commute::SharedCtor() {
  ::memset(&to_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&proportion_) -
      reinterpret_cast<char*>(&to_)) + sizeof(proportion_));
}

GeoGrid_Location_Commute::~GeoGrid_Location_Commute() {
  // @@protoc_insertion_point(destructor:proto.GeoGrid.Location.Commute)
  SharedDtor();
}

void GeoGrid_Location_Commute::SharedDtor() {
}

void GeoGrid_Location_Commute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoGrid_Location_Commute& GeoGrid_Location_Commute::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GeoGrid_Location_Commute_geogrid_2eproto.base);
  return *internal_default_instance();
}


void GeoGrid_Location_Commute::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GeoGrid.Location.Commute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&to_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&proportion_) -
      reinterpret_cast<char*>(&to_)) + sizeof(proportion_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GeoGrid_Location_Commute::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GeoGrid_Location_Commute*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 to = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_to(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double proportion = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_proportion(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GeoGrid_Location_Commute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GeoGrid.Location.Commute)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 to = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &to_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double proportion = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &proportion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GeoGrid.Location.Commute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GeoGrid.Location.Commute)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GeoGrid_Location_Commute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GeoGrid.Location.Commute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 to = 1;
  if (this->to() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->to(), output);
  }

  // double proportion = 2;
  if (this->proportion() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->proportion(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GeoGrid.Location.Commute)
}

::google::protobuf::uint8* GeoGrid_Location_Commute::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.GeoGrid.Location.Commute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 to = 1;
  if (this->to() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->to(), target);
  }

  // double proportion = 2;
  if (this->proportion() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->proportion(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GeoGrid.Location.Commute)
  return target;
}

size_t GeoGrid_Location_Commute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GeoGrid.Location.Commute)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 to = 1;
  if (this->to() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->to());
  }

  // double proportion = 2;
  if (this->proportion() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoGrid_Location_Commute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GeoGrid.Location.Commute)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoGrid_Location_Commute* source =
      ::google::protobuf::DynamicCastToGenerated<GeoGrid_Location_Commute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GeoGrid.Location.Commute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GeoGrid.Location.Commute)
    MergeFrom(*source);
  }
}

void GeoGrid_Location_Commute::MergeFrom(const GeoGrid_Location_Commute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GeoGrid.Location.Commute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.to() != 0) {
    set_to(from.to());
  }
  if (from.proportion() != 0) {
    set_proportion(from.proportion());
  }
}

void GeoGrid_Location_Commute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GeoGrid.Location.Commute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoGrid_Location_Commute::CopyFrom(const GeoGrid_Location_Commute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GeoGrid.Location.Commute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoGrid_Location_Commute::IsInitialized() const {
  return true;
}

void GeoGrid_Location_Commute::Swap(GeoGrid_Location_Commute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeoGrid_Location_Commute::InternalSwap(GeoGrid_Location_Commute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(to_, other->to_);
  swap(proportion_, other->proportion_);
}

::google::protobuf::Metadata GeoGrid_Location_Commute::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_geogrid_2eproto);
  return ::file_level_metadata_geogrid_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GeoGrid_Location::InitAsDefaultInstance() {
  ::proto::_GeoGrid_Location_default_instance_._instance.get_mutable()->coordinate_ = const_cast< ::proto::GeoGrid_Location_Coordinate*>(
      ::proto::GeoGrid_Location_Coordinate::internal_default_instance());
}
class GeoGrid_Location::HasBitSetters {
 public:
  static const ::proto::GeoGrid_Location_Coordinate& coordinate(const GeoGrid_Location* msg);
};

const ::proto::GeoGrid_Location_Coordinate&
GeoGrid_Location::HasBitSetters::coordinate(const GeoGrid_Location* msg) {
  return *msg->coordinate_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeoGrid_Location::kIdFieldNumber;
const int GeoGrid_Location::kNameFieldNumber;
const int GeoGrid_Location::kProvinceFieldNumber;
const int GeoGrid_Location::kPopulationFieldNumber;
const int GeoGrid_Location::kCoordinateFieldNumber;
const int GeoGrid_Location::kContactPoolsFieldNumber;
const int GeoGrid_Location::kCommutesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeoGrid_Location::GeoGrid_Location()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GeoGrid.Location)
}
GeoGrid_Location::GeoGrid_Location(const GeoGrid_Location& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      contactpools_(from.contactpools_),
      commutes_(from.commutes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_coordinate()) {
    coordinate_ = new ::proto::GeoGrid_Location_Coordinate(*from.coordinate_);
  } else {
    coordinate_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&population_) -
    reinterpret_cast<char*>(&id_)) + sizeof(population_));
  // @@protoc_insertion_point(copy_constructor:proto.GeoGrid.Location)
}

void GeoGrid_Location::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GeoGrid_Location_geogrid_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&coordinate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&population_) -
      reinterpret_cast<char*>(&coordinate_)) + sizeof(population_));
}

GeoGrid_Location::~GeoGrid_Location() {
  // @@protoc_insertion_point(destructor:proto.GeoGrid.Location)
  SharedDtor();
}

void GeoGrid_Location::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete coordinate_;
}

void GeoGrid_Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoGrid_Location& GeoGrid_Location::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GeoGrid_Location_geogrid_2eproto.base);
  return *internal_default_instance();
}


void GeoGrid_Location::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GeoGrid.Location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contactpools_.Clear();
  commutes_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && coordinate_ != nullptr) {
    delete coordinate_;
  }
  coordinate_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&population_) -
      reinterpret_cast<char*>(&id_)) + sizeof(population_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GeoGrid_Location::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GeoGrid_Location*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.GeoGrid.Location.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 province = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_province(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 population = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_population(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .proto.GeoGrid.Location.Coordinate coordinate = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::GeoGrid_Location_Coordinate::_InternalParse;
        object = msg->mutable_coordinate();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .proto.GeoGrid.Location.ContactPools contactPools = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::GeoGrid_Location_ContactPools::_InternalParse;
          object = msg->add_contactpools();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // repeated .proto.GeoGrid.Location.Commute commutes = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::GeoGrid_Location_Commute::_InternalParse;
          object = msg->add_commutes();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GeoGrid_Location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GeoGrid.Location)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.GeoGrid.Location.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 province = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &province_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 population = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &population_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GeoGrid.Location.Coordinate coordinate = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_coordinate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GeoGrid.Location.ContactPools contactPools = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_contactpools()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GeoGrid.Location.Commute commutes = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_commutes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GeoGrid.Location)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GeoGrid.Location)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GeoGrid_Location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GeoGrid.Location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.GeoGrid.Location.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // int64 province = 3;
  if (this->province() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->province(), output);
  }

  // int64 population = 4;
  if (this->population() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->population(), output);
  }

  // .proto.GeoGrid.Location.Coordinate coordinate = 5;
  if (this->has_coordinate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::coordinate(this), output);
  }

  // repeated .proto.GeoGrid.Location.ContactPools contactPools = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->contactpools_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->contactpools(static_cast<int>(i)),
      output);
  }

  // repeated .proto.GeoGrid.Location.Commute commutes = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->commutes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->commutes(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GeoGrid.Location)
}

::google::protobuf::uint8* GeoGrid_Location::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.GeoGrid.Location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.GeoGrid.Location.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // int64 province = 3;
  if (this->province() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->province(), target);
  }

  // int64 population = 4;
  if (this->population() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->population(), target);
  }

  // .proto.GeoGrid.Location.Coordinate coordinate = 5;
  if (this->has_coordinate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::coordinate(this), target);
  }

  // repeated .proto.GeoGrid.Location.ContactPools contactPools = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->contactpools_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->contactpools(static_cast<int>(i)), target);
  }

  // repeated .proto.GeoGrid.Location.Commute commutes = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->commutes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->commutes(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GeoGrid.Location)
  return target;
}

size_t GeoGrid_Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GeoGrid.Location)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.GeoGrid.Location.ContactPools contactPools = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->contactpools_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->contactpools(static_cast<int>(i)));
    }
  }

  // repeated .proto.GeoGrid.Location.Commute commutes = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->commutes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->commutes(static_cast<int>(i)));
    }
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .proto.GeoGrid.Location.Coordinate coordinate = 5;
  if (this->has_coordinate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *coordinate_);
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // int64 province = 3;
  if (this->province() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->province());
  }

  // int64 population = 4;
  if (this->population() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->population());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoGrid_Location::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GeoGrid.Location)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoGrid_Location* source =
      ::google::protobuf::DynamicCastToGenerated<GeoGrid_Location>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GeoGrid.Location)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GeoGrid.Location)
    MergeFrom(*source);
  }
}

void GeoGrid_Location::MergeFrom(const GeoGrid_Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GeoGrid.Location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contactpools_.MergeFrom(from.contactpools_);
  commutes_.MergeFrom(from.commutes_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_coordinate()) {
    mutable_coordinate()->::proto::GeoGrid_Location_Coordinate::MergeFrom(from.coordinate());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.province() != 0) {
    set_province(from.province());
  }
  if (from.population() != 0) {
    set_population(from.population());
  }
}

void GeoGrid_Location::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GeoGrid.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoGrid_Location::CopyFrom(const GeoGrid_Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GeoGrid.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoGrid_Location::IsInitialized() const {
  return true;
}

void GeoGrid_Location::Swap(GeoGrid_Location* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeoGrid_Location::InternalSwap(GeoGrid_Location* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&contactpools_)->InternalSwap(CastToBase(&other->contactpools_));
  CastToBase(&commutes_)->InternalSwap(CastToBase(&other->commutes_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(coordinate_, other->coordinate_);
  swap(id_, other->id_);
  swap(province_, other->province_);
  swap(population_, other->population_);
}

::google::protobuf::Metadata GeoGrid_Location::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_geogrid_2eproto);
  return ::file_level_metadata_geogrid_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GeoGrid_Person::InitAsDefaultInstance() {
}
class GeoGrid_Person::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeoGrid_Person::kIdFieldNumber;
const int GeoGrid_Person::kAgeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeoGrid_Person::GeoGrid_Person()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GeoGrid.Person)
}
GeoGrid_Person::GeoGrid_Person(const GeoGrid_Person& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&age_) -
    reinterpret_cast<char*>(&id_)) + sizeof(age_));
  // @@protoc_insertion_point(copy_constructor:proto.GeoGrid.Person)
}

void GeoGrid_Person::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&age_) -
      reinterpret_cast<char*>(&id_)) + sizeof(age_));
}

GeoGrid_Person::~GeoGrid_Person() {
  // @@protoc_insertion_point(destructor:proto.GeoGrid.Person)
  SharedDtor();
}

void GeoGrid_Person::SharedDtor() {
}

void GeoGrid_Person::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoGrid_Person& GeoGrid_Person::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GeoGrid_Person_geogrid_2eproto.base);
  return *internal_default_instance();
}


void GeoGrid_Person::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GeoGrid.Person)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&age_) -
      reinterpret_cast<char*>(&id_)) + sizeof(age_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GeoGrid_Person::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GeoGrid_Person*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 age = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_age(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GeoGrid_Person::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GeoGrid.Person)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 age = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GeoGrid.Person)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GeoGrid.Person)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GeoGrid_Person::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GeoGrid.Person)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // int64 age = 2;
  if (this->age() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->age(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GeoGrid.Person)
}

::google::protobuf::uint8* GeoGrid_Person::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.GeoGrid.Person)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // int64 age = 2;
  if (this->age() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->age(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GeoGrid.Person)
  return target;
}

size_t GeoGrid_Person::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GeoGrid.Person)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // int64 age = 2;
  if (this->age() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->age());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoGrid_Person::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GeoGrid.Person)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoGrid_Person* source =
      ::google::protobuf::DynamicCastToGenerated<GeoGrid_Person>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GeoGrid.Person)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GeoGrid.Person)
    MergeFrom(*source);
  }
}

void GeoGrid_Person::MergeFrom(const GeoGrid_Person& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GeoGrid.Person)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.age() != 0) {
    set_age(from.age());
  }
}

void GeoGrid_Person::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GeoGrid.Person)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoGrid_Person::CopyFrom(const GeoGrid_Person& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GeoGrid.Person)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoGrid_Person::IsInitialized() const {
  return true;
}

void GeoGrid_Person::Swap(GeoGrid_Person* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeoGrid_Person::InternalSwap(GeoGrid_Person* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(age_, other->age_);
}

::google::protobuf::Metadata GeoGrid_Person::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_geogrid_2eproto);
  return ::file_level_metadata_geogrid_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GeoGrid::InitAsDefaultInstance() {
}
class GeoGrid::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeoGrid::kLocationsFieldNumber;
const int GeoGrid::kPersonsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeoGrid::GeoGrid()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GeoGrid)
}
GeoGrid::GeoGrid(const GeoGrid& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      locations_(from.locations_),
      persons_(from.persons_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.GeoGrid)
}

void GeoGrid::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GeoGrid_geogrid_2eproto.base);
}

GeoGrid::~GeoGrid() {
  // @@protoc_insertion_point(destructor:proto.GeoGrid)
  SharedDtor();
}

void GeoGrid::SharedDtor() {
}

void GeoGrid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoGrid& GeoGrid::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GeoGrid_geogrid_2eproto.base);
  return *internal_default_instance();
}


void GeoGrid::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GeoGrid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  locations_.Clear();
  persons_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GeoGrid::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GeoGrid*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.GeoGrid.Location locations = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::GeoGrid_Location::_InternalParse;
          object = msg->add_locations();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // repeated .proto.GeoGrid.Person persons = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::GeoGrid_Person::_InternalParse;
          object = msg->add_persons();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GeoGrid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GeoGrid)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.GeoGrid.Location locations = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_locations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GeoGrid.Person persons = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_persons()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GeoGrid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GeoGrid)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GeoGrid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GeoGrid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.GeoGrid.Location locations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->locations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->locations(static_cast<int>(i)),
      output);
  }

  // repeated .proto.GeoGrid.Person persons = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->persons_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->persons(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GeoGrid)
}

::google::protobuf::uint8* GeoGrid::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.GeoGrid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.GeoGrid.Location locations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->locations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->locations(static_cast<int>(i)), target);
  }

  // repeated .proto.GeoGrid.Person persons = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->persons_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->persons(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GeoGrid)
  return target;
}

size_t GeoGrid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GeoGrid)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.GeoGrid.Location locations = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->locations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->locations(static_cast<int>(i)));
    }
  }

  // repeated .proto.GeoGrid.Person persons = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->persons_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->persons(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoGrid::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GeoGrid)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoGrid* source =
      ::google::protobuf::DynamicCastToGenerated<GeoGrid>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GeoGrid)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GeoGrid)
    MergeFrom(*source);
  }
}

void GeoGrid::MergeFrom(const GeoGrid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GeoGrid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  locations_.MergeFrom(from.locations_);
  persons_.MergeFrom(from.persons_);
}

void GeoGrid::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GeoGrid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoGrid::CopyFrom(const GeoGrid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GeoGrid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoGrid::IsInitialized() const {
  return true;
}

void GeoGrid::Swap(GeoGrid* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeoGrid::InternalSwap(GeoGrid* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&locations_)->InternalSwap(CastToBase(&other->locations_));
  CastToBase(&persons_)->InternalSwap(CastToBase(&other->persons_));
}

::google::protobuf::Metadata GeoGrid::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_geogrid_2eproto);
  return ::file_level_metadata_geogrid_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::GeoGrid_Location_Coordinate* Arena::CreateMaybeMessage< ::proto::GeoGrid_Location_Coordinate >(Arena* arena) {
  return Arena::CreateInternal< ::proto::GeoGrid_Location_Coordinate >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::GeoGrid_Location_ContactPools_ContactPool* Arena::CreateMaybeMessage< ::proto::GeoGrid_Location_ContactPools_ContactPool >(Arena* arena) {
  return Arena::CreateInternal< ::proto::GeoGrid_Location_ContactPools_ContactPool >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::GeoGrid_Location_ContactPools* Arena::CreateMaybeMessage< ::proto::GeoGrid_Location_ContactPools >(Arena* arena) {
  return Arena::CreateInternal< ::proto::GeoGrid_Location_ContactPools >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::GeoGrid_Location_Commute* Arena::CreateMaybeMessage< ::proto::GeoGrid_Location_Commute >(Arena* arena) {
  return Arena::CreateInternal< ::proto::GeoGrid_Location_Commute >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::GeoGrid_Location* Arena::CreateMaybeMessage< ::proto::GeoGrid_Location >(Arena* arena) {
  return Arena::CreateInternal< ::proto::GeoGrid_Location >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::GeoGrid_Person* Arena::CreateMaybeMessage< ::proto::GeoGrid_Person >(Arena* arena) {
  return Arena::CreateInternal< ::proto::GeoGrid_Person >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::GeoGrid* Arena::CreateMaybeMessage< ::proto::GeoGrid >(Arena* arena) {
  return Arena::CreateInternal< ::proto::GeoGrid >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
